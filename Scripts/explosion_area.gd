extends Area2D
class_name ExplosionArea

# Configura√ß√µes de explos√£o
@export var explosion_radius: float = 30.0
@export var terrain_search_distance: float = 30.0

func _on_body_entered(body: Node2D) -> void:
	"""Detecta colis√µes e cria crateras no terreno"""
	if not BattleManager.is_authority():
		return
	
	print("üëë Authority processando colis√£o...")
	print("[BODY DETECTADO]: ", body.name, " (", body.get_class(), ")")
	
	var entity_type = EntityHelper.get_entity_type(body)
	
	if entity_type == "Player":
		print("üéØ Player atingido: ", body.name, " (ID: ", body.network_id, ")")
		
		# Sistema de penetra√ß√£o - encontra terreno "atr√°s" do player
		var terrain_hit_position = _find_terrain_through_player(body)
		
		if terrain_hit_position != Vector2.ZERO:
			print("üï≥Ô∏è Terreno encontrado atrav√©s do player em: ", terrain_hit_position)
			
			# Sincroniza colis√£o dupla: player + terreno direcional
			sync_player_collision.rpc(body.network_id, global_position, terrain_hit_position)
		else:
			print("‚ùå Terreno n√£o encontrado atrav√©s do player")
		
	elif entity_type == "Terrain":
		print("üåç Terreno atingido diretamente em: ", global_position)
		
		# Colis√£o direta com terreno
		sync_terrain_collision.rpc(global_position)
		
	else:
		print("‚ùì Colis√£o com entidade desconhecida: ", entity_type)

@rpc("authority", "call_local", "reliable")
func sync_terrain_collision(impact_position: Vector2):
	"""Sincroniza cria√ß√£o de cratera via network"""
	print("üì° Sincronizando colis√£o em: ", impact_position)
	
	# Emite signal gen√©rico - ProjectileManager decide o que fazer
	MessageBus.projectile_collision.emit("Terrain", impact_position, -1)
	
	# Remove proj√©til (sincronizado)
	var projectile = get_parent()
	if projectile:
		projectile.queue_free()

@rpc("authority", "call_local", "reliable")
func sync_player_collision(player_id: int, impact_position: Vector2, terrain_position: Vector2):
	"""Sincroniza colis√£o com player via network"""
	print("üì° Sincronizando colis√£o com player ID: ", player_id)
	
	# Emite signal gen√©rico para player
	MessageBus.projectile_collision.emit("Player", impact_position, player_id)
	
	# Emite signal gen√©rico para terreno (cratera direcional)
	MessageBus.projectile_collision.emit("Terrain", terrain_position, -1)
	
	# Remove proj√©til (sincronizado)
	var projectile = get_parent()
	if projectile:
		projectile.queue_free()

# ===== SISTEMA DE PENETRA√á√ÉO =====

func _find_terrain_through_player(player: Player) -> Vector2:
	"""Encontra terreno na dire√ß√£o de penetra√ß√£o do proj√©til"""
	
	var projectile = get_parent()
	if not projectile:
		print("‚ùå Proj√©til n√£o encontrado")
		return Vector2.ZERO
	
	# Pega RayCast2D do proj√©til
	var raycast = projectile.get_node_or_null("RayCast2D")
	if not raycast:
		print("‚ùå RayCast2D n√£o encontrado no proj√©til")
		return Vector2.ZERO
	
	# Configura RayCast para busca de penetra√ß√£o
	var penetration_direction = _get_penetration_direction()
	var ray_start = global_position  # Ponto de impacto
	var ray_distance = 50.0  # M√°ximo 50px
	
	# Configura dire√ß√£o e dist√¢ncia do ray
	raycast.target_position = penetration_direction * ray_distance
	raycast.enabled = true
	raycast.force_raycast_update()
	
	if raycast.is_colliding():
		var hit_position = raycast.get_collision_point()
		print("‚úÖ RayCast encontrou terreno em: ", hit_position)
		return hit_position
	else:
		print("‚ö†Ô∏è RayCast n√£o encontrou terreno em 50px")
		# Fallback: Posi√ß√£o estimada baseada na dire√ß√£o
		return ray_start + (penetration_direction * 30.0)

func _get_penetration_direction() -> Vector2:
	"""Calcula dire√ß√£o de penetra√ß√£o do proj√©til"""
	
	var projectile = get_parent()
	if not projectile:
		return Vector2.DOWN  # Fallback para baixo
	
	# Usa velocidade do proj√©til para determinar dire√ß√£o
	var velocity = projectile.linear_velocity
	if velocity.length() > 0:
		return velocity.normalized()
	else:
		return Vector2.DOWN  # Fallback para baixo

# ===== UTILITY METHODS =====

func get_explosion_stats() -> Dictionary:
	"""Retorna estat√≠sticas da explos√£o para debug"""
	return {
		"explosion_radius": explosion_radius,
		"terrain_search_distance": terrain_search_distance
	}
